name: React CI/CD Pipeline with S3

on:
#  pull_request:
#    branches:
#      - main
  push:
    branches:
      - main

  # GitHub의 Actions 탭의 Run workflow 기능 활성화 (코드 push 없이 워크플로우 시작 가능)
  workflow_dispatch:

jobs:
  # PR이 발생했을 경우에는 테스트만 진행
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      # Repo 내용을 Checkout한다.
      - name: Checkout source code
        uses: actions/checkout@v3

      # Node.js 버전을 18로 설정한다.
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 종속성 일치를 위해 ci 명령어로 종속성을 설치한다.
      - name: Install dependencies
        run: npm ci

      # 테스트를 진행하고 커버리지를 출력한다.
      - name: Run tests with coverage
        run: npm test -- --coverage

      # PR에 테스트 커버리지 결과를 남긴다.
      - name: Post Test Coverage Report as PR Comment
        run: |
          COVERAGE_INFO=$(cat coverage/lcov.info)
          COMMENT="#### Test Coverage Report\n\`\`\`\n${COVERAGE_INFO}\n\`\`\`"
          PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
          echo $COMMENT | gh pr comment ${PR_NUMBER} -F-
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  # Push가 발생했을 경우에는, 테스트 커버리지가 70% 이상인 경우에 S3로의 배포를 진행한다. -> 지금은 테스트 없이 배포만 진행
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

#      - name: Run tests
#        run: npm test

      - name: Build React
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        run: aws s3 sync --region ${{ secrets.AWS_REGION }} build/ s3://${{ secrets.S3_BUCKET_NAME }} --delete

#      # 추후에 CloudFront 추가시 사용 (새로운 배포시 기존의 캐시 무효화)
#      - name: Invalidate CloudFront cache
#        run: |
#          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
